
JAVA 


Servlets:

		JAVA -->OOPL-->james gosling-->1996 -->sun micro system-->oracle
		
		java version-->22
		
		JSE						JEE 		JME
	corejava,awt,swings...		Servlets	

standlone app/desktop apps	

web applications			http gmail

		server  -->tomcat -->apache 

Servlets:
==========
	Login app
				javax.servlet     --->jakarta
				javax.servlet.http
	
			1) implementes Servlet(I) 	-->5 methods init,service,destroy,getServletInfo,getServletConfig
			2) extends GenericServlet(C)-->service
			3) extends HttpServlet(C)   -->doGet,DoPut,doPost,doDelete


1*12=12
100*12=1200 methods
class Login extends HttpServlet(12)
{





}

	HTTP:stateless protocol

		HttpSession-->server side
		Cookies		-->client side 


	HttpSession hs=request.getSession(true);


	JSP-->java+html
	make changes and refresh the browser
	
	implicit objects
	
	
Spring Framework:
=================

			Spring is non-invasive framework which is used to make light weight  and loosley coupled application.
	
		Framework:Ready Made
	
	
			Invasive	:struts,it will force to the developer to implement predefined API
			Non-invasive :spring,hibernate,will never force to implement predefind api
	
			
			light weight  light weight framework
			heavy weight 	EJB,Servlets
			
			
			loosley coupled 
			tightly coupled
	
	
	
	class Test
	{
		public void m1()
		{
			A a=new A();
			a.m2()
		}
	
	}
	
	class A
	{
	A(String name){
	
	}
	public void m2(){
	
	}
	
	
	
	}
	
	
	
	
	Spring Container
	
	
	
	2003 spring 1.x
	
	Rod JOHNSON
	
	EJB--->interface21-->2003
	
	
	6.x
	
	Spring 
	20+ modules
	
	spring core
	spring jdbc
	spring mvc
	spring jpa
	spring orm
	spring aop
	spring security....
	
	
	spring core/IOC/Dependency injection
		
				container -->BeanFactory-->lazy intializer,ApplicationContext-->eager intializer
	
			life cycle of a object
	
				1)creation of object
				2)wiring the object
				3)configuring the objects
				4)destroying the object
	
	
		setter injection		-->property
		constrctor injection	-->constructor-arg
		autowiring
		
						configuration:XMl,annotation,java config
							<beans><bean><property><constructor-arg>,ref,scope,autowire,id,class
						
			class Test{	
											config file /containers:BF,AC
			
			}			
						
			class Employee{
			
			
			}			
						spring jars--maven
						
						
						
				Autowiring	-->container	-->autowire-->@Autowired
						
						
	Annotation Config	:xml-->annotations				
						
						
						
						@Component/@Service/@Repository
						@Autowired
						@Configuration
						@ComponentScan
						@Value
						@Bean
						@Qualifier
						@Controller
						@RequestMapping

	NOTE:Spring has given annotations for userdefined classes but not for predefined classes 
																			jpa/hibernate,datasource
				Java Config		
						
Spring MVC	:
============
			MVC-->model view controller 
							
						
		front controller	-->DispatcherServlet	



Spring BOOT:		spring boot 3.x java 17 spring 6
===========
		
			1)configuration
			2)dependencies		(java/jpa/hibernate/database/server/spring....)
			3)Server



1)Auto Configuration :Most of the commonly used classes already configured by the spring boot.
2)Starters
3)Embeded server		tomcat 
4)Actuator				rest endpoints
5)Embeded DB			H2

		
		STS-->Spring tool suite


		starter parent


Spring Boot

		SOA
Webservices:
============		REST

	ATM	-->atm card  X bank atm card -->
	
		withdraw,....

	phonepe-->electricity-->service no 



RMI			
EJB		app1      app2
SP

DCOM    .net  .net
RPC      c/C++
CORBA	Interoperable apps



SOAP

REST



		MYSQL



				spring boot rest app JPAHIbernate


				
						java--->database 
						
							JDBC-->create tables/constraints/sequence(mysql/oracle)
						
							JPA/hibernate-->no need of tables,query's
							
							JPA--->Specification
							hibernate--->implementation
							
							
							@Id
							@Entity
							
							
				1)	Add Product
				2)update Product
				3)delete product
				4)get Product
				5)getAllProducts
				6)getAllProductsBetweenPrice
				7)getAllProductsByCategory
				
				
				
				
				Layered Architecture:
				=====================
				
					Presentation Layer/Controller Layer/UI
					
					Service Layer/Business layer		interface-->class
					
					Repository layer/persistence layer/DAO	interface --->class
					
				
				
				
							
							
							
							
							
							
							
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
	
	
	
	
	
	
	
	
	
	
