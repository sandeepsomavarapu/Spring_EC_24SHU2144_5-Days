
JAVA 


Servlets:

		JAVA -->OOPL-->james gosling-->1996 -->sun micro system-->oracle
		
		java version-->22
		
		JSE						JEE 		JME
	corejava,awt,swings...		Servlets	

standlone app/desktop apps	

web applications			http gmail

		server  -->tomcat -->apache 

Servlets:
==========
	Login app
				javax.servlet     --->jakarta
				javax.servlet.http
	
			1) implementes Servlet(I) 	-->5 methods init,service,destroy,getServletInfo,getServletConfig
			2) extends GenericServlet(C)-->service
			3) extends HttpServlet(C)   -->doGet,DoPut,doPost,doDelete


1*12=12
100*12=1200 methods
class Login extends HttpServlet(12)
{





}

	HTTP:stateless protocol

		HttpSession-->server side
		Cookies		-->client side 


	HttpSession hs=request.getSession(true);


	JSP-->java+html
	make changes and refresh the browser
	
	implicit objects
	
	
Spring Framework:
=================

			Spring is non-invasive framework which is used to make light weight  and loosley coupled application.
	
		Framework:Ready Made
	
	
			Invasive	:struts,it will force to the developer to implement predefined API
			Non-invasive :spring,hibernate,will never force to implement predefind api
	
			
			light weight  light weight framework
			heavy weight 	EJB,Servlets
			
			
			loosley coupled 
			tightly coupled
	
	
	
	class Test
	{
		public void m1()
		{
			A a=new A();
			a.m2()
		}
	
	}
	
	class A
	{
	A(String name){
	
	}
	public void m2(){
	
	}
	
	
	
	}
	
	
	
	
	Spring Container
	
	
	
	2003 spring 1.x
	
	Rod JOHNSON
	
	EJB--->interface21-->2003
	
	
	6.x
	
	Spring 
	20+ modules
	
	spring core
	spring jdbc
	spring mvc
	spring jpa
	spring orm
	spring aop
	spring security....
	
	
	spring core/IOC/Dependency injection
		
				container -->BeanFactory-->lazy intializer,ApplicationContext-->eager intializer
	
			life cycle of a object
	
				1)creation of object
				2)wiring the object
				3)configuring the objects
				4)destroying the object
	
	
		setter injection		-->property
		constrctor injection	-->constructor-arg
		autowiring
		
						configuration:XMl,annotation,java config
							<beans><bean><property><constructor-arg>,ref,scope,autowire,id,class
						
			class Test{	
											config file /containers:BF,AC
			
			}			
						
			class Employee{
			
			
			}			
						spring jars--maven
						
						
						
				Autowiring	-->container	-->autowire-->@Autowired
						
						
	Annotation Config	:xml-->annotations				
						
						
						
						@Component/@Service/@Repository
						@Autowired
						@Configuration
						@ComponentScan
						@Value
						@Bean
						@Qualifier
						@Controller
						@RequestMapping

	NOTE:Spring has given annotations for userdefined classes but not for predefined classes 
																			jpa/hibernate,datasource
				Java Config		
						
Spring MVC	:
============
			MVC-->model view controller 
							
						
		front controller	-->DispatcherServlet	



Spring BOOT:		spring boot 3.x java 17 spring 6
===========
		
			1)configuration
			2)dependencies		(java/jpa/hibernate/database/server/spring....)
			3)Server



1)Auto Configuration :Most of the commonly used classes already configured by the spring boot.
2)Starters
3)Embeded server		tomcat 
4)Actuator				rest endpoints
5)Embeded DB			H2

		
		STS-->Spring tool suite


		starter parent


Spring Boot

		SOA
Webservices:
============		REST

	ATM	-->atm card  X bank atm card -->
	
		withdraw,....

	phonepe-->electricity-->service no 



RMI			
EJB		app1      app2
SP

DCOM    .net  .net
RPC      c/C++
CORBA	Interoperable apps



SOAP

REST



		MYSQL



				spring boot rest app JPAHIbernate


				
						java--->database 
						
							JDBC-->create tables/constraints/sequence(mysql/oracle)
						
							JPA/hibernate-->no need of tables,query's
							
							JPA--->Specification
							hibernate--->implementation
							
							
							@Id
							@Entity
							@GeneratedValue
							@Column
							
							
				1)	Add Product
				2)update Product
				3)delete product
				4)get Product
				5)getAllProducts
				6)getAllProductsBetweenPrice
				7)getAllProductsByCategory
				
				
				
				
				Layered Architecture:
				=====================
				
					Presentation Layer/Controller Layer/UI
					
					Service Layer/Business layer		interface-->class
					
					Repository layer/persistence layer/DAO	interface --->class
					
				
Week-2:
=========				 2003-->Rod Johnson-->sourceforge

POJO
				spring core
				spring aop
				spring jdbc
				spring mvc
				spring security
				spring web
				spring orm
				...
			

spring IOC

Dependency injection

IOC 

servlet
ejb				
			javax/jakarta

	1)implements Servlet
	2)extends GenericServlet
	3)extends HttpServlet 12 methods
	
	class Test extends HttpServlet
	{
	
	}

Spring :non-invasive,light weight,loosley coupled
		Invasive
		non-invasive


		Container-->BeanFactory/ApplicationContext
		
		1)instantiation
		2)Wiring 
		3)configuring
		4)destroy



	class	Test
	{
	
	}
							container(config)1.xml,2.annotation,3.java config

	class Client
	{
	
	
	}
		setter injection			<property>	
		constrcutor injection		<constructor-arg>
		autowiring					autowire=""




	@Component/@Service/@Repository

			
							
	Note:
	====															  datasource,transaction,security	
	Spring has given annotations for userdefined classes but not for predefined classes .
	
							@Component/@Service/@Repository/@Autowired
							
	Spring Boot:AutoConfiguration						
							
						
						
						
			JPA-->JDBC-->			
				orm tools-->hibernate,eclipse link,topi link,ibatis....		
						spring JPA
						
						
Spring Boot:
============		3.x-->spring 6.x-->17				
						
			1)maven dependencies
			2)server
			3)configuration
			
			
						
			1)auto configuration :most of the comonnly used classes already configured by the spring boot			
			2)embeded server	(tomcat)			
			3)starters	
			4)actuators  /beans/health/....
			5)inbuilt DB(h2)
	
	
	spring boot rest
	
	
	webservices:
	
			SOAP-->XML
			REST
		
				JSON,XML,htML,PT,JS
	
	
	
	
			app---->	postman
	

	1)AddEmployee
	2)updateEmployee
	3)deleteEmployee
	4)getEmployee
	5)getAllEmployees
	6)getAllEmployeesBetweenSalaries
	7)getAllByDesignation
	
	
	Repository layer
	
	
	JpaRepository/CrudRepository
	
	
	CrudRepository-->
	
	JpaRepository-->
	
	jpa-->persist,merge,remove,find,createQuery-->(JPQL)
		save
		saveAll
		findById
		existsById
		findAll
		findAllById
		deleteById
		delete
		deleteAllById
		deleteAll
		
Monolithic Architecture:

		scalling up/scalling down
		
			
		
Microservices:
		
		decompose/devide/split your large project into smaller services and later communicate them
		
		
			independently deployable
			independently scallable
			independently developed
			independently tested
			
			communication
				
					synchronous		HTTP-->RestTemplate,webclient,open fiegn
					asynchronous	rabbitMQ,ActiveMQ,kafka		
	Spring cloud	
		
		
				authentication
				autherization
		Shopping cart app
			
		RestTemplate-->
		Blocking Nature: RestTemplate is synchronous and blocks the executing thread until the request completes
		
		
		Webclient
		
		
		microservices design patterns
		
		shoppingcart app
			1      2      3       4
		db 		 db	     db		  db	mysql	
		
		
		spring cloud config server -->https://github.com/sandeepsomavarapu/config-server-repo.git
		
		centralised config		--->git repo
		
		
		1)add config client starter dependency to each microservice
		
		2)create spring boot by adding config server dependency
		
		3)inside new spring boot (config server)-->git url
		
			@EnableConfigServer 
		
		refresh:
		devtools
		
		
		Eureka service registry
		
			1)create new spring boot project with eureka server dependency
				1.1)add @EnableEurekaServer
				1.2)add properties
			2)for all microservices add eureka discovery client dependency
		
			3)eureka.client.serviceUrl.defaultZone  = http://localhost:8761/eureka
		
		
		spring caching
		
		spring security,JWT, Oauth,security
		
		mysql 
		
		
		Compare NoSQL with RDBMS
MongoDB(database, documents, collections, aggregation) JSON based queries
Insert/update/delete documents in Collections, projection, limit, sort
		
		
		
		Api gate way
			
									m1	8080
				authentication
				Api gate way		m2  8081
	client			9191		
						
									m3   8082
						
						
									m4
						
		
		
		
		
		circuit breaker pattern  ->resielence 4j
		
			m1    m2    m3   m4
		
		
		distributed tracing  zipkin,slueth
		
		
	Spring security	
		
		
		autentication
		autherization  JWT  token
		
		
		
		https://medium.com/vedity/spring-boot-caching-mechanism-8ef901147e60
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		