
JAVA 


Servlets:

		JAVA -->OOPL-->james gosling-->1996 -->sun micro system-->oracle
		
		java version-->22
		
		JSE						JEE 		JME
	corejava,awt,swings...		Servlets	

standlone app/desktop apps	

web applications			http gmail

		server  -->tomcat -->apache 

Servlets:
==========
	Login app
				javax.servlet     --->jakarta
				javax.servlet.http
	
			1) implementes Servlet(I) 	-->5 methods init,service,destroy,getServletInfo,getServletConfig
			2) extends GenericServlet(C)-->service
			3) extends HttpServlet(C)   -->doGet,DoPut,doPost,doDelete


1*12=12
100*12=1200 methods
class Login extends HttpServlet(12)
{





}

	HTTP:stateless protocol

		HttpSession-->server side
		Cookies		-->client side 


	HttpSession hs=request.getSession(true);


	JSP-->java+html
	make changes and refresh the browser
	
	implicit objects
	
	
Spring Framework:
=================

			Spring is non-invasive framework which is used to make light weight  and loosley coupled application.
	
		Framework:Ready Made
	
	
			Invasive	:struts,it will force to the developer to implement predefined API
			Non-invasive :spring,hibernate,will never force to implement predefind api
	
			
			light weight  light weight framework
			heavy weight 	EJB,Servlets
			
			
			loosley coupled 
			tightly coupled
	
	
	
	class Test
	{
		public void m1()
		{
			A a=new A();
			a.m2()
		}
	
	}
	
	class A
	{
	A(String name){
	
	}
	public void m2(){
	
	}
	
	
	
	}
	
	
	
	
	Spring Container
	
	
	
	2003 spring 1.x
	
	Rod JOHNSON
	
	EJB--->interface21-->2003
	
	
	6.x
	
	Spring 
	20+ modules
	
	spring core
	spring jdbc
	spring mvc
	spring jpa
	spring orm
	spring aop
	spring security....
	
	
	spring core/IOC/Dependency injection
		
				container -->BeanFactory,ApplicationContext
	
			life cycle of a object
	
				1)creation of object
				2)wiring the object
				3)configuring the objects
				4)destroying the object
	
	
		setter injection		-->property
		constrctor injection	-->constructor-arg
		autowiring
		
						configuration:XMl,annotation,java config
						
						
			class Test{	
											config file /containers:BF,AC
			
			}			
						
			class Employee{
			
			
			}			
						spring jars--maven
						
						
						
				Autowiring	-->container	-->autowire-->@Autowired
						
						
	Annotation Config	:xml-->annotations				
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
	
	
	
	
	
	
	
	
	
	
